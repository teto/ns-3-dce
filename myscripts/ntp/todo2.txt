apparemment lamport_violated n'est pas vrai



ldd elf-cache/0/ntpd
http://pubs.opengroup.org/stage7tc1/

NTP utilise UDP, port 123

"hstr" program



=== WIRESHARK ===
Run wireshark from directory
WIRESHARK_RUN_FROM_BUILD_DIRECTORY=1 ./wireshark


=== NS3Off ===
Pour voir la config actuelle de ns3, regarder dans build/c4che
./waf configure --prefix=install
--enable-sudo 
/home/teto/ns3off/install



=== DCE ===
./waf configure --with-ns3=$HOME/ns3off/install

Quand on fait waf configure, on peut utiliser
"--with-ns3=" plutôt.
  --with-ns3=WITH_NS3   Specify the installed directory of ns-3-dev
./waf configure --with-ns3=$HOME/dce/build --enable-opt \
                --enable-kernel-stack=$HOME/dce/net-next-sim/arch \
                --prefix=$HOME/dce/build
./waf build
./waf install

Utiliser l'option "--prefix" pour changer là où ns3 s'installe

Checking for ns3-fd-net-device (None)            : not found
Needs to enable module fd-net-device


=== Ntimed ===
Pour le compiler
$ CFLAGS="-fPIC -U_FORTIFY_SOURCE " LDFLAGS="-pie -rdynamic -ggdb" make
./ntimed-client --poll-server 1.ubuntu.pool.ntp.org
The '-t /tmp/somefile' arguments tells it to write a full blow-by-blow
tracefile, for analysis and debugging.

ntpq -p ntp.lip6.fr
osiris.lip6.fr

readelf -h ntimed-client |grep Type  (t'attends 'DYN' comme output)

NTP_PeerSet a l'air intéressant

 TB_Step() and TB_Adjust()


=== OPENNTPD portable ===

git@github.com:openntpd-portable/openntpd-portable.git
$ ./autogen.sh
CFLAGS="-fPIC -U_FORTIFY_SOURCE -ggdb" LDFLAGS="-pie -rdynamic" ./configure


=== Chrony ===
Configuration commands listed here:
http://chrony.tuxfamily.org/manual.html#Configuration-file


=== NTPd ===

A un moment donné j'avais ce problème dans gdb: "which has no line number information"
J'ai remplacé -g par -ggdb dans les CFLAGS et cela a résolu le pb

Lancer le configure comme:
$ CFLAGS="-fPIC -U_FORTIFY_SOURCE -ggdb" LDFLAGS="-pie -rdynamic" ./configure --enable-debugging  --enable-getifaddrs --enable-thread-support=no --without-sntp

If you set --enable-getifaddrs=no then you resort to ioctl (SIOCGIFCONF) which seems broken on linux

In stock dce getifaddr seems to have a bug

You may need to add --with-openssl-libdir=/usr/lib/x86_64-linux-gnu

  --enable-getifaddrs     + Enable the use of getifaddrs() [[yes|no]].
  --enable-slew-always    s always slew the time
  --enable-step-slew      s step and slew the time
  --enable-ntpdate-step   s if ntpdate should step the time

Dans measure_tick_fuzz, ntp essaye de voir quelle est la précision max de l'horlge en mesurant rapidement 
// 20e-9	== minimum clock increment (s)

To add debug statements in "isc" folder, use "isc_log_write"
To add debug statements in "ntpd" folder, use "msyslog" I think


=== NTP debugging guide ===
First start ntpd locally
sudo ntpd -c ~/dotfiles/ntp.conf -l ntp.log -p ntp.pid -f ntp.drift -n -D 1
ntpq --numeric --peers
ntpq -p will display the offsets for each reachable server in milliseconds (ntpdc -p uses seconds instead)


./ntimed-client -t ntimed.log 127.0.0.1


sudo chrony/chronyd -f ~/dce/chrony.conf -d -4 


in ntpsim=.c:get_systime on a:
    /*
     * To fool the code that determines the local clock precision,
     * we advance the clock a minimum of 200 nanoseconds on every
     * clock read. This is appropriate for a typical modern machine
     * with nanosecond clocks. Note we make no attempt here to
     * simulate reading error, since the error is so small. This may
     * change when the need comes to implement pi


mon NTP utilise ca
http://linux.die.net/man/3/clock_gettime
rc = clock_gettime(CLOCK_REALTIME, tsp);


alarming: normal
alarming: overflow
alarming: overflow
alarming: overflow
alarming: overflow
alarming: overflow
alarming: overflow
alarming: overflow
alarming: overflow
It means we got a SIGALARM and the code hasn't had a chance to deal with that yet but another SIGALARM has arrived









addto_syslog appelle dce_time

Dans ns3 le temps est représenté par   int64_t Time::m_data;  //!< Virtual time value, in the current unit.

Why do we need MarkedTimes ??

Pour lancer un serveur ntp local (dans le fichier de conf, ne configurer qu'un seul server
127.0.0.1 stratum 1)
# -n => don't fork
sudo ntpd -c ~/im15/analysis/ntp.conf -n

Les communications NTP font du 123 <-> 123
En local on utilise horlogegps.reseau.jussieu.fr

/etc/ntp.conf, ca peut générer des stats via les directives:
- statsdir / filegen / statistics etc...
http://www.thegeekstuff.com/2014/06/linux-ntp-server-client/

You may have problems with apparmor:
http://ubuntuforums.org/showthread.php?t=1008906
- Désactiver le profil suivi d'un restart évidemment
sudo ln -s /etc/apparmor.d/usr.sbin.ntpd /etc/apparmor.d/disable/
sudo service apparmor restart




You don't fudge the server's stratum. You declare its internal clock
a reference clock, and fudge that.

Reference clocks have addresses 127.127.x.y. The x encodes the type
of clock, the y is simply a clock identifier.

server 127.127.1.0
fudge 127.127.1.0 stratum 10

Reference clock type 1 is a computer's internal clock. It should be
used only if an NTP server should (continue to) serve time when it
(temporarily or permanently) has no real reference clock available,
and should always be fudged to high stratum.


fudge   127.127.1.0 stratum 10

http://serverfault.com/questions/153206/setting-up-a-local-stratum-2-ntp-server

http://lists.ntp.org/pipermail/questions/2003-November/001507.html
NTPtrace permet 

Pour tester:
$ sudo ~/ntp/ntpd/ntpd -c ~/dce/myscripts/ntp/ntp.conf -n -D debug
$ ~/ntimed/ntimed-client --poll-server localhost


$ ntpdate -q ntp.lip6.fr
$ ntpdate -q horlogegps.reseau.jussieu.fr
server 134.157.254.19, stratum 0, offset 0.000000, delay 0.00000
 7 Apr 13:16:33 ntpdate[14274]: no server suitable for synchronization found





teto_> thehajime, in the functions listed here: https://www.nsnam.org/docs/dce/release/1.0/manual/html/dce-user-tech.html I don't see any function to set time ? like clock_settime 
<teto_> if I look at man clock_settime, it looks posix https://www.nsnam.org/docs/dce/release/1.0/manual/html/dce-user-tech.html
<teto_> http://pubs.opengroup.org/stage7tc1/ *

DCE définit l'EPOCH dans ce fichier:
http://code.nsnam.org/ns-3-dce/file/3f4dfb7d8461/model/utils.cc#l25


int clock_settime(clockid_t clk_id,  const  struct  timespec *tp)
// TODO clock_setres

 teto_: in ns-3 core, there is no epoch time
<thehajime> (if i understand correctly)
<thehajime> there is only delta time from the beginning of simulation
<thehajime> otoh, DCE has a offset to return epoch time
<thehajime> s/a/an/
<thehajime> http://code.nsnam.org/ns-3-dce/file/3f4dfb7d8461/model/utils.cc#l25
<thehajime> see the global (undocumented) attribute "SimulationTimeBase"
<thehajime> this intends to return the time ("SimulationTimeBase + delta) for time(2) for instance.
<swat_m> tomhenderson, i have a few things to ask about the gsoc proposal
<teto_> thehajime, true but I would like to add per node clocks in ns3, so that one can run NTPd with DCE on ns3
<tomhenderson> sure, go ahead
<thehajime> per-node clock, i remember the email
<teto_> that's why I am looking at the posix functions ntpd/ntimed use to set the time
<swat_m> what are we supposed to write in the deliverables portion 
<thehajime> okay so, i can assume SetTime member
<teto_> I see that posix functions are implemented like "dce_*"
<thehajime> right
<thehajime> with DCE(clock_settime) macro in model/libc-ns3.h
<thehajime> so you may need to implement:
<tomhenderson> swat_m, I think you handled it correctly
<teto_> nice I will have a look at the macro
<thehajime> int dce_clock_settime(clockid_t clk_id, const struct timespec *tp)
<thehajime> {
<thehajime> ns3::SetTime(tp *blabla);
<thehajime> return something;
<thehajime> }
<thehajime> (no indent here...)
a marco, POSIX API wrapper, with the appropriate header file update would be the first step for you

Dans "int dce_clock_gettime (clockid_t c, struct timespec *tp)" défini dans dce-time.h
SimulationTimeBase
UtilsTimeToSimulationTime

Pour tester
utils.cc:GetTimeStamp 
PrepareDoStartProcess
dce_exit
UnixSocketFd:Setsockopt(): Unsupported setsockopt requested. level: SOL_SOCKET, optname: 35
35 correspond à SO_TIMESTAMPNS / SO_TIMESTAMP

